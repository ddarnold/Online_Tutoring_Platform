package de.thu.thutorium.database.DBOMappers;

import de.thu.thutorium.api.transferObjects.common.CourseTO;
import de.thu.thutorium.database.dbObjects.CourseDBO;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.ReportingPolicy;

/**
 * Mapper interface for converting between {@link CourseTO} and {@link CourseDBO}.
 *
 * <p>This interface uses MapStruct to map data transfer objects (DTOs) to database objects (DBOs)
 * and vice versa. The mapping configuration specifies how certain fields should be handled, such as
 * ignoring unmapped fields.
 *
 * <p>Annotations used:
 *
 * <ul>
 *   <li>@Mapper: Marks this interface as a MapStruct mapper.
 *   <li>componentModel = "spring": Configures the mapper to be a Spring-managed bean.
 *   <li>unmappedTargetPolicy = ReportingPolicy.IGNORE: Ignores unmapped target properties to avoid
 *       build errors.
 *   <li>@Mapping: Customizes the mapping of specific fields.
 * </ul>
 */
@Mapper(componentModel = "spring", unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface CourseDBOMapper {
  /**
   * Maps a {@link CourseTO} object to a {@link CourseDBO} object.
   *
   * <p>Custom mapping configurations:
   *
   * <ul>
   *   <li>tutor: Ignored because it will be set in the service layer.
   *   <li>students: Ignored because it is default-initialized in the constructor.
   *   <li>courseId: Ignored because it is auto-generated by the database.
   * </ul>
   *
   * @param courseTO the {@link CourseTO} object to map.
   * @return the mapped {@link CourseDBO} object.
   */
  @Mapping(target = "tutor", ignore = true) // Will be set in the service layer
  @Mapping(target = "students", ignore = true) // Default initialized in the constructor
  @Mapping(target = "courseId", ignore = true) // Auto-generated in the database
  CourseDBO toDBO(CourseTO courseTO);
}
