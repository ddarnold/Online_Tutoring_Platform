package de.thu.thutorium.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import jakarta.persistence.*;
import java.time.LocalDateTime;
import java.util.List;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * Represents a user account entity within the system. This entity is mapped to the "user_account"
 * table in the database.
 *
 * <p>Includes basic user information such as first name, last name, role, verification status, and
 * the account creation timestamp.
 *
 * <p>Lombok annotations are used to automatically generate boilerplate code like getters, setters,
 * and constructors.
 */
@Entity
@Table(name = "user_account")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class User {
  /** The unique identifier for the user. This value is automatically generated by the database. */
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  @Column(name = "user_id")
  private Long userId;

  /** The first name of the user. This field is mandatory and cannot be null. */
  @Column(name = "first_name", nullable = false)
  private String firstName;

  /** The last name of the user. This field is mandatory and cannot be null. */
  @Column(name = "last_name", nullable = false)
  private String lastName;

  /**
   * The role of the user within the system, such as STUDENT or TUTOR. This field is represented as
   * a string in the database.
   */
  @Enumerated(EnumType.STRING)
  @Column(name = "role", nullable = false)
  private UserRole role;

  /** Indicates whether the user's email is verified. Defaults to {@code false} if not specified. */
  @Column(name = "is_verified", nullable = false)
  private Boolean isVerified = false;

  /**
   * The timestamp when the user account was created. This field is mandatory and cannot be null.
   */
  @Column(name = "created_at", nullable = false)
  private LocalDateTime createdAt;

  /**
   * Represents the list of courses associated with this user if they are a tutor.
   *
   * <p>This relationship is mapped by the {@code tutor} field in the {@link Course} entity. The
   * cascade type {@code CascadeType.ALL} ensures that all operations (such as persist and remove)
   * are propagated to the associated courses. Additionally, {@code orphanRemoval = true} guarantees
   * that courses that no longer have a tutor reference are automatically deleted.
   *
   * <p>If this user is deleted, all their associated courses will also be deleted due to the
   * cascading operations defined in this relationship.
   *
   * @see Course
   */
  @OneToMany(mappedBy = "tutor", cascade = CascadeType.ALL, orphanRemoval = true)
  @JsonIgnoreProperties({"ratingsAsTutor"})
  private List<Course> courses;

  /**
   * Represents the list of ratings that this user has received as a tutor.
   *
   * <p>This relationship is mapped by the {@code tutor} field in the {@link Rating} entity. The
   * cascade type {@code CascadeType.ALL} ensures that all operations (such as persist and remove)
   * are propagated to the associated ratings. Additionally, {@code orphanRemoval = true} guarantees
   * that ratings that no longer reference this tutor are automatically deleted.
   *
   * <p>If this user is deleted, all their associated ratings as a tutor will also be deleted.
   *
   * @see Rating
   */
  @OneToMany(mappedBy = "tutor", cascade = CascadeType.ALL, orphanRemoval = true)
  @JsonIgnoreProperties({"student", "tutor"})
  private List<Rating> ratingsAsTutor; // Ratings received as a tutor

  /**
   * Represents the list of ratings that this user has given as a student.
   *
   * <p>This relationship is mapped by the {@code student} field in the {@link Rating} entity. The
   * cascade type {@code CascadeType.ALL} ensures that all operations (such as persist and remove)
   * are propagated to the associated ratings. Additionally, {@code orphanRemoval = true} guarantees
   * that ratings that no longer reference this student are automatically deleted.
   *
   * <p>If this user is deleted, all their associated ratings as a student will also be deleted.
   *
   * @see Rating
   */
  @OneToMany(mappedBy = "student", cascade = CascadeType.ALL, orphanRemoval = true)
  @JsonIgnoreProperties({"tutor"})
  private List<Rating> ratingsAsStudent; // Ratings given as a student

  /**
   * The credentials associated with this user. This is the inverse side of a one-to-one
   * relationship.
   */
  @OneToOne(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
  @JsonIgnore
  private Credentials credentials;
}
